step 1: copy whole background
step 2: iterate thru trail array and copy correct piece
step 3: get locations of bikes and copy bike sprites
step 4: render hearts?

30fps: 1 666 666 * 50 MHz clock cycles per frame - should have enough time


- problems: 
how would we prevent the FB from changing during the frame?
    - double frame buffer??

Can we only update the playing field?

How to copy correct area of memory?
sample codes are just an idea, will have to unroll manually (increment I and J w/ always ff -> increment once i, j etc every clk)

******************************
sample to copy background
(unrolled)
\
// can combine x and y for the background
alwaysff @posedge clk
begin
  if (RESET || (x == 640 && y = 480)
    x <= 0
    y <= 0
  else if (x != 640)
    x <= x + 1
  else if (x == 640)
    x <= 0
    y <= y + 1
 end
 
 // in sram controller
 background_sprite[@x,y] = frame_buffer[@x,y]
 
 ***************************
 side note: ways of storing trails
  current: 114x114 array of 0, 1, 2 ,3 ... depending on if there is a trail at that location
  different idea: have seperate arrays for each type of trail and store the locations
    pros: easier? and faster to iterate thru
    cons: more memory needed
  really hyper memory efficient and maybe smart idea
    -we know the start locations of the bikes and therefore the trails, so we can store the location of the next trail relative to the
      trail we are currently on. So if the next trail is above the current trail, we can encode it as 1, down is 2, etc, etc
      memory would look like [1, 1, 1, 1, 2, 2, 2, 3,3,3,1,....]
 
 
sample for the trails (for current method):
(unroll from for loops like above)
(not sure if SV auto does it or if it does it all in parallel (which wouldn't work for sram))

for (int i = 0; i < 112, i++)
  for (int j = 0; j .....)
    if trail_array[@i,j] = 1
      for (k = 0, k < 4 k++)
        .... h < 4, ....
        .... look at bikes = framebuffer[640*(4*k+x)+(4*h+y)]
    // for other colors/types of trail 
    if ... = 2
    if ... = 3
***********************************
sample for the bikes:
// can make hearts same size so we can reuse this module

// if bike is at position x, y
for (int i = 0, i < 32, i++)
  for (int j = 0, j < 32, j++)
    sprite[32*i+j] = framebuffer[640*(i+x)+(j+y)]
